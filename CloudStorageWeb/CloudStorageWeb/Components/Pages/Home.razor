@page "/"
@page "/Authorization"
@using CloudStorageClass.CloudStorageModel
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IConfiguration Configuration

<h1>Авторизация</h1>



<div>
    <p>Почта</p>
    <input type="email" @bind="Email" />
</div>

<div>
    <p>Пароль</p>
    <input type="password" @bind="Password" />
</div>

<style>
    .button {
        margin-top: 10px; /* Измените значение по вашему усмотрению */
    }

    .another-button {
        margin-top: 10px;
        margin-right: 90px; /* Измените значение по вашему усмотрению */
    }
</style>

<div>
    <button type="submit" class="button" @onclick="SubmitForm">Войти</button>
</div>

<div>
    <button type="submit" class="another-button" @onclick="RegForm">Регистрация</button>
</div>
@code {
    [Parameter]
    public string urlAddress { get; set; } // Corrected property name

    public string Email { get; set; } // Corrected property name
    public string Password { get; set; } // Corrected property name

    HttpClient httpClient = null!;
    string url = "/api/Users/";
    User users;

    private async void SubmitForm()
    {
        try
        {
            if (!string.IsNullOrEmpty(Password) && !string.IsNullOrEmpty(Email))
            {
                url = Configuration.GetSection("UrlSettings")["UserApiUrl"] + url;
                // url = "http://127.0.0.1:8081" + url;


                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(url + Email + "," + Password);
                await LoadData();
            }
        }
        catch (Exception)
        {

        }
    }

    async Task LoadData()
    {
        try
        {
            users = await httpClient.GetFromJsonAsync<User>(httpClient.BaseAddress);
            if (users == null)
            {

            }
            else
            {
                // userStateService.users = users;
                await ProtectedLocalStore.SetAsync("usersid", users.Id);
                await ProtectedLocalStore.SetAsync("password", users.Password);
                await ProtectedLocalStore.SetAsync("mail", users.Email);
                NavigationManager.NavigateTo($"/Account");
            }
        }
        catch (Exception)
        {

        }
    }


    private void RegForm()
    {
        try
        {
            NavigationManager.NavigateTo($"/RegUser");

        }
        catch (Exception)
        {

        }
    }
}